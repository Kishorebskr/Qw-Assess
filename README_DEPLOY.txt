README - Terraform + S3 backend bootstrap\n\nWhat this repo contains:\n- .github/workflows/deploy.yml : CI workflow that bootstraps S3 + DynamoDB, runs Terraform, and deploys k8s manifests\n- terraform/bootstrap/bootstrap.tf : creates the S3 bucket and DynamoDB table used for remote state\n- terraform/main.tf, outputs.tf, variables.tf : your main infra (main.tf updated to declare an S3 backend in the config; actual bucket is supplied during `terraform init` via backend-config in CI)\n- k8s/ : Kubernetes manifests to apply after EKS is created\n\nHow the workflow works:\n1. The workflow runs on push to main or via workflow_dispatch.\n2. It uses GitHub Secrets AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY to authenticate.\n3. It runs the Terraform bootstrap module to create an S3 bucket (name derived from the repo and run id) and a DynamoDB table for locking.\n4. It initializes the main Terraform with backend-config pointing to that S3 bucket and the DynamoDB lock table, then runs plan/apply.\n5. After successful apply it updates kubeconfig and applies the k8s manifests in k8s/.\n\nImportant notes:\n- The bootstrap S3 bucket name is generated during the workflow as: ${{ github.repository }}-${{ github.run_id }}.\n- This guarantees uniqueness for the run. If you prefer a stable bucket name, modify terraform/bootstrap/bootstrap.tf and pass a fixed value via -var or set a secret.\n- Terraform state files will not be committed back to the repository; they are stored in S3.\n- You are responsible for keeping AWS credentials in GitHub Secrets.\n