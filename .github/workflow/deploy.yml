name: Full CI/CD Pipeline with EKS Provisioning

on:
  workflow_dispatch: {}
  push:
    branches: [main]
    paths-ignore:
      - 'k8/deployment.yaml'
  pull_request:
    branches: [main]

permissions:
  contents: read

jobs:
  terraform:
    name: Provision EKS Cluster
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Terraform Init
        working-directory: terraform
        run: |
          terraform init \
            -backend-config="bucket=tf-state-kishorebskr-qw-final4" \
            -backend-config="key=eks/terraform.tfstate" \
            -backend-config="region=ap-south-1" \
            -backend-config="dynamodb_table=tf-state-locks-kishorebskr-qw-final4" \
            -backend-config="encrypt=true"

      - name: Terraform Apply
        working-directory: terraform
        run: terraform apply -auto-approve

      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/v1.29.1/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/kubectl

      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.14.0

      - name: Configure kubeconfig
        run: |
          aws eks update-kubeconfig --name tc-eks-cluster-tf --region ap-south-1

      - name: Create namespace
        run: kubectl create namespace demo-tf --dry-run=client -o yaml | kubectl apply -f -

      - name: Install NGINX Ingress Controller
        run: |
          helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
          helm repo update
          helm upgrade --install ingress-nginx ingress-nginx/ingress-nginx \
            --namespace ingress-nginx --create-namespace

      - name: Install metrics-server
        run: |
          kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml

  test:
    name: Unit Testing
    runs-on: ubuntu-latest
    needs: [terraform]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      - run: npm ci
      - run: npm test || echo "No tests found"

  lint:
    name: Static Code Analysis
    runs-on: ubuntu-latest
    needs: [terraform]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      - run: npm ci
      - run: npm run lint

  build:
    name: Build Project
    runs-on: ubuntu-latest
    needs: [test, lint]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      - run: npm ci
      - run: npm run build

  docker:
    name: Docker Build & Push to AWS ECR
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - uses: actions/checkout@v4
      - uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1
      - id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build Docker Image with Unique Tag
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-south-1.amazonaws.com/qw-app:$IMAGE_TAG .
          docker tag ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-south-1.amazonaws.com/qw-app:$IMAGE_TAG \
                     ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-south-1.amazonaws.com/qw-app:latest
      - name: Install Trivy (Stable Version)
        run: |
          sudo apt-get update && sudo apt-get install -y wget curl
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sudo sh -s -- -b /usr/local/bin
      - name: Scan Docker Image with Trivy
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: trivy image ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-south-1.amazonaws.com/qw-app:$IMAGE_TAG
      - name: Push Docker Image to ECR
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-south-1.amazonaws.com/qw-app:$IMAGE_TAG
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-south-1.amazonaws.com/qw-app:latest

  deploy:
    name: Deploy to EKS
    runs-on: ubuntu-latest
    needs: [docker]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4
      - uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1
      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/v1.29.1/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/kubectl
      - name: Configure kubeconfig
        run: |
          aws eks update-kubeconfig --name tc-eks-cluster-tf --region ap-south-1
      - name: Apply Kubernetes manifests (services/ingress/etc.)
        run: kubectl apply -f k8s/ -n demo-tf
      - name: Update deployment with new image
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          kubectl set image deployment/test-app \
            test-app=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-south-1.amazonaws.com/qw-app:$IMAGE_TAG \
            -n demo-tf
      - name: Wait for rollout to complete
        run: |
          kubectl rollout status deployment/test-app -n demo-tf --timeout=120s